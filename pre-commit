#!/bin/bash
# pre-commit git hook to check the validity of a puppet manifest
#
# Prerequisites:
#   gem install puppet-lint puppet metadata-json-lint rake rspec rspec-puppet
#
# Install:
#  /path/to/repo/.git/hooks/pre-commit
#
# Original:
#  blog: http://techblog.roethof.net/puppet/a-puppet-git-pre-commit-hook-is-always-easy-to-have/
#
# Authors:
#  Ronny Roethof
#  Mattias Geniar <m@ttias.be>
#  Rob Nelson <rnelson0@gmail.com>
#  Dimitri Steyaert <dimitri@steyaert.be>

function checkyaml() {
    ruby -e "require 'yaml'; YAML.load_file('$1')"
}

# Make sure the necessary tools are installed. If they aren't, just die and
# stop the commit. Force the use of these tools before a commit is allowed.
# No commit should ever happen without a puppet-lint check.

 path_to_puppet=$(command -v puppet)
 if ! [ -x "$path_to_puppet" ] ; then
    echo "The puppet binary wasn't found. Sorry, I won't allow you to commit without puppet installed."
    echo "Please install puppet and try again."
    exit 1
 fi

 path_to_puppet_lint=$(command -v puppet-lint)
 if ! [ -x "$path_to_puppet_lint" ] ; then
    echo "The puppet-lint binary wasn't found. Sorry, I won't allow you to commit without puppet-lint installed."
    echo "Please install puppet-lint and try again."
    exit 1
 fi

 path_to_erb=$(command -v erb)
 if ! [ -x "$path_to_erb" ] ; then
    echo "The erb binary wasn't found. Sorry, I won't allow you to commit without erb installed."
    echo "Please install erb (Ruby Templating) and try again."
    exit 1
 fi

 path_to_ruby=$(command -v ruby)
 if ! [ -x "$path_to_ruby" ] ; then
    echo "The ruby binary wasn't found. Sorry, I won't allow you to commit without ruby installed."
    echo "Please install ruby and try again."
    exit 1
 fi

echo -e "\e[33m### Checking puppet syntax, for science! ###\e[0m"
for file in `git diff --name-only --cached | grep -E '\.(pp|erb)'`
do
    # Only check new/modified files that end in *.pp extension
    if [[ -f $file && $file == *.pp ]]
    then
        puppet-lint \
            --with-filename $file

        # Set us up to bail if we receive any syntax errors
        if [[ $? -ne 0 ]]
        then
            syntax_is_bad=1
        else
            echo "OK: $file looks good"
        fi
    fi
done
echo ""

echo -e "\e[33m### Checking if puppet manifests are valid ###\e[0m"
# validating the whole manifest takes too long. uncomment this
# if you want to test the whole shebang.
# for file in `find . -name "*.pp"`
for file in `git diff --name-only --cached | grep -E '\.(pp|erb)'`
do
    if [[ -f $file && $file == *.pp ]]
    then
        puppet parser validate $file
        if [[ $? -ne 0 ]]
        then
            echo -e "\e[31mERROR: puppet parser failed at: $file\e[0m"
            syntax_is_bad=1
        else
            echo "OK: $file looks valid"
        fi
    fi
done
echo ""

if [[ -f manifests/site.pp ]]
then
  echo -e "\e[33m### Checking if the catalog compiles\e[0m"
  puppet apply --noop manifests/site.pp
  if [[ $? -ne 0 ]]
  then
      echo -e "\e[31mERROR: puppet catalog compilation failed\e[0m"
      syntax_is_bad=1
  else
      echo "OK: $file looks valid"
  fi
fi

echo -e "\e[33m### Checking if ruby template syntax is valid ###\e[0m"
for file in `git diff --name-only --cached | grep -E '\.(erb)'`
do
    if [[ -f $file ]]
    then
        erb -P -x -T '-' $file | ruby -c
        if [[ $? -ne 0 ]]
        then
            echo -e "\e[31mERROR: ruby template parser failed at: $file\e[0m"
            syntax_is_bad=1
        else
            echo "OK: $file looks like a valid ruby template"
        fi
    fi
done
echo ""

echo -e "\e[33m### Checking if YAML syntax is valid ###\e[0m"
for file in `git diff --name-only --cached | grep -E '\.(yaml)'`
do
    if [[ -f $file ]]
    then
        checkyaml $file
        if [[ $? -ne 0 ]]
        then
            echo -e "\e[31mERROR: YAML syntax validation failed at: $file\e[0m"
            syntax_is_bad=1
        else
            echo "OK: $file looks like a valid YAML file"
        fi
    fi
done
echo ""

echo -e "\e[33m### Checking if metadata.json syntax is valid ###\e[0m"
for file in `git diff --name-only --cached | grep metadata.json`
do
    if [[ -f $file ]]
    then
        metadata-json-lint $file
        if [[ $? -ne 0 ]]
        then
            echo -e "\e[31mERROR: metadata.json syntax validation failed at: $file\e[0m"
            syntax_is_bad=1
        else
            echo "OK: $file looks like a valid metadata json file"
        fi
    fi
done
echo ""

echo -e "\e[33m### Performing RSpec tests ###\e[0m"
for file in `git diff --name-only --cached | grep -E '\.(pp)'`
do
    if [[ -f $file ]]
    then
        rake rspec
        if [[ $? -ne 0 ]]
        then
            echo -e "\e[31mERROR: RSpec tests have failed\e[0m"
            syntax_is_bad=1
        else
            echo "OK: It looks like RSpec tests have completed successfully"
        fi
else echo "done"
    fi
done
echo ""
echo ""

echo -e "\e[33m### Final results ###\e[0m"
if [[ $syntax_is_bad -eq 1 ]]
then
    echo -e "\e[31mFATAL: Syntax is bad. See above errors\e[0m"
    echo -e "\e[31mBailing\e[0m"
    exit 1
else
    echo -e "\e[32mLooking sharp over there!\e[0m"
    echo ""
    echo ""
fi
